# DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

"""
Auto-generated class for Metricscpu
"""

from . import client_support


class Metricscpu(object):
    """
    auto-generated. don't touch.
    """

    @staticmethod
    def create(**kwargs):
        """
        :type idle: float
        :type iowait: float
        :type irq: float
        :type nice: float
        :type softirq: float
        :type system: float
        :type user: float
        :rtype: Metricscpu
        """

        return Metricscpu(**kwargs)

    def __init__(self, json=None, **kwargs):
        if json is None and not kwargs:
            raise ValueError('No data or kwargs present')

        class_name = 'Metricscpu'
        data = json or kwargs

        # set attributes
        data_types = [float]
        self.idle = client_support.set_property('idle', data, data_types, False, [], False, True, class_name)
        data_types = [float]
        self.iowait = client_support.set_property('iowait', data, data_types, False, [], False, True, class_name)
        data_types = [float]
        self.irq = client_support.set_property('irq', data, data_types, False, [], False, True, class_name)
        data_types = [float]
        self.nice = client_support.set_property('nice', data, data_types, False, [], False, True, class_name)
        data_types = [float]
        self.softirq = client_support.set_property('softirq', data, data_types, False, [], False, True, class_name)
        data_types = [float]
        self.system = client_support.set_property('system', data, data_types, False, [], False, True, class_name)
        data_types = [float]
        self.user = client_support.set_property('user', data, data_types, False, [], False, True, class_name)

    def __str__(self):
        return self.as_json(indent=4)

    def as_json(self, indent=0):
        return client_support.to_json(self, indent=indent)

    def as_dict(self):
        return client_support.to_dict(self)

